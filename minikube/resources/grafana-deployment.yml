# Grafana configuration Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana-container
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: datasource-config
              mountPath: /etc/grafana/provisioning/datasources
            - name: provisioning-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: dashboard-config
              mountPath: /var/lib/grafana/dashboards
      volumes:
        - name: datasource-config
          configMap:
            name: datasource-config
        - name: provisioning-config
          configMap:
            name: provisioning-config
        - name: dashboard-config
          configMap:
            name: dashboard-config
---
# Configuration of Grafana Data Store
apiVersion: v1
kind: ConfigMap
metadata:
  name: datasource-config
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
      - name: VictoriaMetrics
        type: prometheus
        access: proxy
        url: http://victoria-service:8428
        isDefault: true
---
# Configuration of Grafana provisioning
apiVersion: v1
kind: ConfigMap
metadata:
  name: provisioning-config
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards
---
# Configuration of Grafana Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-config
data:
  application-dashboard.json: |
    {
      "id": null,
      "uid": "minikube",
      "title": "Minikube Metrics",
      "timezone": "browser",
      "panels": [
        {
          "type": "graph",
          "title": "HTTP Requests Total",
          "gridPos": {"x": 0, "y": 0, "w": 12, "h": 8},
          "targets": [
            {
              "expr": "sum(kubelet_http_requests_total{method='GET'})",
              "refId": "A"
            }
          ],
          "lines": true,
          "linewidth": 2
        },
        {
          "type": "stat",
          "title": "Running Pods",
          "gridPos": {"x": 0, "y": 12, "w": 12, "h": 8},
          "targets": [
            {
              "expr": "sum by (pod) (kube_pod_status_phase{phase=\"Running\", pod=~\".*-deployment-.*\"})",
              "refId": "A"
            }
          ]
        },
        {
          "type": "stat",
          "title": "Deployment Replicas",
          "gridPos": {"x": 12, "y": 0, "w": 12, "h": 8},
          "targets": [
            {
              "expr": "sum by (deployment) (kube_deployment_status_replicas_available{deployment=~\".*-deployment\"})",
              "refId": "A"
            }
          ]
        },
        {
          "type": "graph",
          "title": "Node RAM",
          "gridPos": {"x": 12, "y": 12, "w": 12, "h": 8},
          "targets": [
            {
              "expr": "sum(process_resident_memory_bytes{instance='minikube'})",
              "refId": "A"
            }
          ],
          "lines": true,
          "linewidth": 2
        },
        {
          "type": "graph",
          "title": "Node CPU",
          "gridPos": {"x": 0, "y": 24, "w": 12, "h": 12},
          "targets": [
            {
              "expr": "sum(process_cpu_seconds_total{instance='minikube'})",
              "refId": "A"
            }
          ],
          "lines": true,
          "linewidth": 2
        },
        {
          "type": "stat",
          "title": "Persistent Volume Claim",
          "gridPos": {"x": 24, "y": 24, "w": 12, "h": 8},
          "targets": [
            {
              "expr": "sum by (persistentvolumeclaim) (kube_persistentvolumeclaim_status_phase{phase=\"Bound\", persistentvolumeclaim=~\".*-pvc\"})",
              "refId": "A"
            }
          ]
        }
      ]
    }
---
# Grafana configuration Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30000
  type: NodePort